security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        jwt:
            lexik_jwt: ~

    firewalls:
        dev:
            pattern: ^/_(profiler|wdt)
            security: false
        registration:
            pattern: ^/api/users
            #anonymous: true
            stateless: true
            methods: [POST]
        login:
            pattern: ^/api/login_check
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api/
            stateless: true
            provider: jwt
            jwt: ~

        # main:
        #     json_login:
        #         check_path: /authentication_token
        #         username_path: email
        #         password_path: password
        #         success_handler: lexik_jwt_authentication.handler.authentication_success
        #         failure_handler: lexik_jwt_authentication.handler.authentication_failure
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used


    role_hierarchy:
        ROLE_EDITOR: ROLE_USER
        ROLE_VALIDATOR: ROLE_USER
        ROLE_ADMIN: [ROLE_EDITOR, ROLE_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/admin, roles: ROLE_ADMIN }
        - {
            path: ^/api/users,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [GET, PUT, DELETE],
          }
        # - { path: ^/profile, roles: ROLE_USER }
